<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V4.1.2.5//EN"
    "http://www.oasis-open.org/docbook/xml/simple/4.1.2.5/sdocbook.dtd">

<article class="whitepaper">
    <title>Request and Session Scope Management</title>
    
    <articleinfo>
        <author><othername>akarasulu</othername></author>
        <editor><othername>$Author: bearcej $</othername></editor>
        <revhistory>
            <revision>
                <revnumber>$Revision: 1.2 $</revnumber>
                <date>$Date: 2003/05/03 01:21:32 $</date>
                <revdescription>
                    <para>
$Log: request-session-scopes.xml,v $
Revision 1.2  2003/05/03 01:21:32  bearcej
Remove tabs from doc files and fix linefeeds.

Revision 1.1  2003/04/04 01:40:16  akarasulu
Added more to search operation document yet temporarily suspended it to
start working on request scope management design which all operations will
eventually depend upon.

                    </para>
                </revdescription>
            </revision>
        </revhistory>
    </articleinfo>

    <abstract>
        <para>
            The management of session and request state requires distinct
            structures within the server design.  Read only and mutable 
            parameters within either scope must be accessed and modified 
            respectively.  The server must provide interfaces through which
            various components within the system uniformally perfrom such 
            operations.  These interfaces and access to the objects implementing
            them the should be centralized and coherent.
        </para>
    </abstract>
    
    <section>
        <title>Document TODOs:</title>
        <itemizedlist>
            <listitem><para>
                Add diagrams.
            </para></listitem>
        </itemizedlist>
    </section>
    
    <section>
        <title>Background</title>
        
        <para>
            The ClientManager interface contains methods used to access a 
            client's session object.  The ClientManager design promotes 
            centralized access to ClientSession interfaces through a set of
            methods designed to retrieve the session using a ClientKey or by
            using the context of the caller's thread.  The design standardizes
            and centralizes access to session data without requiring other
            server modules to pass around the session object or the client key
            used to retrieve the session.  The design used to manage session 
            scope parameters would offer the same advantages when used to manage
            access and modify operation on request scope parameters. 
        </para>
        
        <para>
            Request information unlike session data changes based on the nature
            of the protocol operation.  For example a search operation will 
            contain a search filter and an add operation will not but will have
            the new entry to add to the DIT.  These differences make it 
            difficult to devise a standard interface to manage request
            parameters.  Using an associative key value pair base Map interface 
            as the basis for the access and storage model standardises the 
            interface across request.  However the Map interface compromises 
            security by enabling both access and modification operations on 
            these parameters regardless of whether they are read only or 
            mutable.  Use of the Map interface implies weakly typed associations
            for protocol defined request parameters.  The types of parameters
            are implicit when accessed or altered as objects in a Map.  Strong
            explicit types for predefined request parameters should be used if
            we know the type.  Weak type associations with a Map should only be
            used for user defined request parameters that are not predefined.
        </para>
        
        <para>
            The request specific processors within the ProtocolEngine are 
            responsible for extracting request parameter from a request PDU
            demarshalled LDAPMessage envelope.  The envelope class is a
            Java stub class generated by the Snacc ASN.1 compiler.  By leaving
            parameter extraction up to the processor, the current design 
            increases the coupling between parameter extraction and request 
            processing which could be two completely separate phases.  The high
            degree of coupling imposes a dependency on Snacc API's within the
            ProtocolEngine.  The only two modules within the server which should
            have these dependencies are the Encoder and Decoder modules.  It 
            makes sense to localize parameter extraction from a request PDU 
            within the decoder module to spare the protocol engine.  The 
            demarshaling from BER encoded streams handled in the Decoder module
            should be followed by parameter extraction into a standard request
            object independent of the ASN.1 BER library used.  The protocol 
            engine's processors only process requests using these agnostic 
            request objects without Snacc dependencies, they are not responsible 
            for managing the creation of the request.  The design extrapolated 
            to the response phase would require a response object for the 
            respective request object (if required by the protocol).  The 
            packaging of response parameters into the Snacc specific LDAPMessage
            envelope would then be delegated to the Encoder which is already 
            dependant on Snacc APIs.  The localization of all ASN.1 dependencies
            to the Decoder and the Encoder module implementations, makes 
            switching ASN.1 libraries easier by only requiring the Encoder and 
            Decoder module implementations to be swapped out without affecting
            the ProtocolEngine.
        </para>
            
        <para>
            The interfaces for these Snacc independant request and response
            objects should be kept within the common subproject so both clients
            and the server can access them.  Final concrete implementations 
            should reside within the package holding BER library dependant 
            classes used to extract these parameters or add them to the BER 
            library specific envelope.  Within there BER library specific 
            packages the implemenation objects would expose package friendly 
            methods to build and modify read-only parameters thereby preserving
            secure access and modification to critical protocol mandated request
            and response parameters.  Utility classes used to build or extract 
            response and request parameters from message envelopes composed of
            ASN.1 compiler generated Java stub classes, needs not reside within
            the server subproject.  These BER library dependant clases will be
            used by both clients and server Encoder/Decoder module 
            implementations and hence are shared across subprojects.  They are
            best kept within the common subproject close to the BER library
            dependant stubs which they operate upon.
        </para>
        
        <para>
            The design goal to standardize request and response scope 
            parameter handling leads to several architectural benefits.  The
            benefits and drawbackes are itemized below:
        </para>
        
        <itemizedlist>
            <title>Benefits</title>
        
            <listitem><para>
            Centralized acess to request and response parameters.
            </para></listitem>

            <listitem><para>
            Standard type explict accessors and mutators of request parameters.
            </para></listitem>

            <listitem><para>
            Data encapsulation with secure accessor and mutator visibility.
            </para></listitem>
            
            <listitem><para>
            Diminished dependence on specific (Snacc) BER libraries used.
            </para></listitem>
            
            <listitem><para>
            Clear distinction between the role of processors and request
            or response value objects.
            </para></listitem>
            
            <listitem><para>
            Greater potential for code reuse across clients and server modules.
            </para></listitem>
            
            <listitem><para>
            Clear, distinct and isolated facility dedicated to request scope
            management.
            </para></listitem>
            
            <listitem><para>
            Generally adds more flexibility to the architecture while making it
            more coherent.
            </para></listitem>
            
            <listitem><para>
            Enables potential later for processor pooling rather than 
            instantiation for each request.  May not really be worth that much
            since processor creation is not expensive.
            </para></listitem>
        </itemizedlist>
        
        
        <itemizedlist>
            <title>Drawbacks</title>
            
            <listitem><para>
                Requires additional interfaces and classes within the common
                subproject.
            </para></listitem>
            
            <listitem><para>
                Requires changes to the ClientModule, EncoderModule, 
                DecoderModule and the ProtocolModule along with a rewrite of the
                request processors.  SEDA stage events will also need 
                modification to use these objects instead of the LDAPMessage
                wrapper generated by Snacc.
            </para></listitem>
            
            <listitem><para>
                Adds the runtime time and space overhead of copying parameters 
                into the agnostic request and response objects.  This will be
                ameliorated by removing this functionality from the processors.
            </para></listitem>
            
            <listitem><para>
                More work and more code.
            </para></listitem>
        </itemizedlist>
    </section>
    
    <section>
        <title>Design</title>
        
        <para>
            An extra package has been created for LDAPv3 operation value object
            interfaces which represent requests and responses.  We'll begin by
            defining these interfaces within the package org.apache.ldap.common.ops.  A
            single package rather than one for responses and another for 
            requests was chosen to minimize the package import statements of
            dependent code.
        </para>
        
        <para>
        </para>
        
        <para>
        </para>
    </section>
    
    <section>
        <title>Implementation</title>
        
        <para>
        </para>
        
        <para>
        </para>
        
        <para>
        </para>
    </section>
    
    <section>
        <title>Future</title>
        
        <para>
        </para>

        <para>
        </para>
    </section>

    <section>
        <title>Faults</title>
        
        <para>
        </para>
        
        <para>
        </para>
        
        <para>
        </para>
    </section>
    
</article>
