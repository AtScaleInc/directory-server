/*
 * $Id: ProtocolEvent.java,v 1.3 2003/03/13 18:27:29 akarasulu Exp $
 *
 * -- (c) LDAPd Group                                                    --
 * -- Please refer to the LICENSE.txt file in the root directory of      --
 * -- any LDAPd project for copyright and distribution information.      --
 *
 */

package org.apache.eve.event.protocol ;


import java.util.EventObject ;


/**
 * Event which logically represents a protocol unbind operation.
 */
public class ProtocolEvent
    extends EventObject
{
    /** Bind request type mask */
  	public static final int BINDREQUEST_MASK	= 0x40000000 ;
    /** Unbind request type mask */
  	public static final int UNBINDREQUEST_MASK	= 0x40000002 ;
    /** Search request type mask */
  	public static final int SEARCHREQUEST_MASK	= 0x40000003 ;
    /** Modify request type mask */
  	public static final int MODIFYREQUEST_MASK	= 0x40000006 ;
    /** Add request type mask */
  	public static final int ADDREQUEST_MASK		= 0x40000008 ;
    /** Del request type mask */
  	public static final int DELREQUEST_MASK		= 0x4000000a ;
    /** Modify Dn request type mask */
  	public static final int MODDNREQUEST_MASK	= 0x4000000c ;
    /** Compare request type mask */
  	public static final int COMPAREREQUEST_MASK	= 0x4000000e ;
    /** Abandon request type mask */
  	public static final int ABANDONREQUEST_MASK	= 0x40000010 ;
    /** Extended request type mask */
  	public static final int EXTENDEDREQ_MASK	= 0x40000017 ;

	/** A [] of all the event type masks */
  	private final static int list[] = { BINDREQUEST_MASK, UNBINDREQUEST_MASK,
        SEARCHREQUEST_MASK, MODIFYREQUEST_MASK, ADDREQUEST_MASK,
        DELREQUEST_MASK, MODDNREQUEST_MASK, COMPAREREQUEST_MASK,
        ABANDONREQUEST_MASK, EXTENDEDREQ_MASK } ;

  	/**
     * A super mask accepting any event generated by bitwise ORing all the
     * defined event mask's.  This mask will always return true on calls to
     * accepts regardless of the event type.
     */
  	public static final int ALL_MASK =
        ABANDONREQUEST_MASK | ADDREQUEST_MASK   | BINDREQUEST_MASK   |
        COMPAREREQUEST_MASK | DELREQUEST_MASK   | EXTENDEDREQ_MASK   |
        MODDNREQUEST_MASK   | MODDNREQUEST_MASK | SEARCHREQUEST_MASK |
        UNBINDREQUEST_MASK ;


    /**
     * Checks to see if a mask is composed of valid mask event values.
     *
     * @param mask the mask value to verify.
     * @return true if the mask is composed of valid event mask values, false
     * otherwise.
     */
    public static boolean isValid(int mask)
    {
        return (ALL_MASK & mask) == mask ;
    }


    /**
     * Checks to see if a event mask type value is defined.
     *
     * @param mask the type mask value to verify.
     * @throws IllegalArgumentException if the mask is not valid.
     */
    public static void checkEventType(int mask)
    {
        switch(mask) {
        case(ABANDONREQUEST_MASK):
            break ;
        case(ADDREQUEST_MASK):
            break ;
        case(BINDREQUEST_MASK):
            break ;
        case(COMPAREREQUEST_MASK):
            break ;
        case(DELREQUEST_MASK):
            break ;
        case(EXTENDEDREQ_MASK):
            break ;
        case(MODDNREQUEST_MASK):
            break ;
        case(MODIFYREQUEST_MASK):
            break ;
        case(SEARCHREQUEST_MASK):
            break ;
        case(UNBINDREQUEST_MASK):
            break ;
        default:
            throw new IllegalArgumentException("Could not recognize protocol "
            	+ "event operation mask value of " + mask) ;
    	}
    }


    //////////////////////
    // Member Variables //
    //////////////////////


    /** The type mask for this event */
  	public final int mask ;
    /** Whether or not this event represents the physical delivery of a PDU */
	public final boolean pduDelivered ;


    /**
     * Creates a logical protocol event representing a protocol operation.
     *
     * @param a_src the source triggering this event (the caller?)
     * @param a_mask the event mask used to identify this event type.
     * @param a_pduDelivered true if this event is to represent the delivery of
     * a physical PDU for this protocol operation.
     */
    ProtocolEvent(Object a_src, int a_mask, boolean a_pduDelivered)
    {
		super(a_src) ;
        mask = a_mask ;
        pduDelivered = a_pduDelivered ;
        checkEventType(mask) ;
    }


    /**
     * Gets whether or not the actual protocol data unit request for an unbind
     * operation was issued againts the server via the protocol handler.  If
     * this is false the session may have been terminated due to timeout or as
     * a result of a client server error.
     *
     * @return true if the actual unbind pdu was delivered, false otherwise.
     */
    public boolean getPduDelivered()
    {
        return pduDelivered ;
    }


    /**
     * Gets whether or not the actual protocol data unit request for an unbind
     * operation was issued againts the server via the protocol handler.  If
     * this is false the session may have been terminated due to timeout or as
     * a result of a client server error.
     *
     * @return true if the actual unbind pdu was delivered, false otherwise.
     */
    public boolean isPduDelivered()
    {
        return pduDelivered ;
    }


    /**
     * Returns whether or not an event mask argument accepts this event
     * type.
     *
     * @param a_mask the mask to test for a match against this event type.
     * @return true if the mask matches for this event type, false otherwise.
     */
    public boolean accepts(int a_mask)
    {
		return ((mask & a_mask) == mask) ;
    }


    /**
     * Gets the event mask type of this event.
     *
     * @return the event mask type.
     */
    public int getMask()
    {
        return mask ;
    }
}
